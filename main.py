# üü¢ –°—Ç–∞—Ä—Ç
print("‚úÖ CLEAN START ‚Äî main.py —Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware

API_TOKEN = "–¢–û–ö–ï–ù"  # üëà –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
ADMIN_ID = 582761505  # üëà –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.add(KeyboardButton("üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"))
menu_kb.add(KeyboardButton("üì¶ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏"))

cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
cancel_kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

# FSM
class Form(StatesGroup):
    waiting_for_bank = State()
    waiting_for_amount = State()
    waiting_for_type = State()

    supplies_choice = State()
    account_category = State()
    account_quantity = State()
    domain_quantity = State()

# /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)

# üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
@dp.message_handler(lambda msg: msg.text == "üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def topup_start(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üè¶ AdsCard", callback_data="bank:adscard"),
        InlineKeyboardButton("üí≥ Traffic.cards", callback_data="bank:trafficcards")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=kb)
    await message.answer("‚ùå –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", reply_markup=cancel_kb)
    await Form.waiting_for_bank.set()

@dp.callback_query_handler(lambda c: c.data.startswith("bank:"), state=Form.waiting_for_bank)
async def topup_bank(query: types.CallbackQuery, state: FSMContext):
    _, bank = query.data.split(":")
    await state.update_data(bank=bank)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=cancel_kb)
    await Form.waiting_for_amount.set()
    await query.answer()

@dp.message_handler(state=Form.waiting_for_amount)
async def topup_amount(message: types.Message, state: FSMContext):
    await state.update_data(amount=message.text.strip())

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚ö° –°—Ä–æ—á–Ω–æ–µ", callback_data="type:urgent"),
        InlineKeyboardButton("üïò –ù–µ —Å—Ä–æ—á–Ω–æ–µ (–¥–æ 21:00)", callback_data="type:normal")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=kb)
    await Form.waiting_for_type.set()

@dp.callback_query_handler(lambda c: c.data.startswith("type:"), state=Form.waiting_for_type)
async def topup_type(query: types.CallbackQuery, state: FSMContext):
    _, topup_type = query.data.split(":")
    await state.update_data(topup_type=topup_type)

    user_id = query.from_user.id
    username = query.from_user.username or "–Ω–µ—Ç username"
    data = await state.get_data()
    topup_type_text = "‚ö° –°—Ä–æ—á–Ω–æ–µ" if topup_type == "urgent" else "üïò –ù–µ —Å—Ä–æ—á–Ω–æ–µ (–¥–æ 21:00)"

    text = (
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{username} (ID: {user_id})\n"
        f"üè¶ –ë–∞–Ω–∫: {data['bank']}\n"
        f"üí≥ –°—É–º–º–∞: {data['amount']}\n"
        f"üìå –¢–∏–ø: {topup_type_text}"
    )

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"approve:{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"decline:{user_id}")
    )

    await bot.send_message(ADMIN_ID, text, reply_markup=kb)
    await query.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ", reply_markup=menu_kb)
    await state.finish()

# üì¶ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
@dp.message_handler(lambda msg: msg.text == "üì¶ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏")
async def supplies_start(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="supply:accounts"),
        InlineKeyboardButton("üåê –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã", callback_data="supply:domains")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞:", reply_markup=kb)
    await Form.supplies_choice.set()

# üë§ –ê–∫–∫–∞—É–Ω—Ç—ã
@dp.callback_query_handler(lambda c: c.data == "supply:accounts", state=Form.supplies_choice)
async def supply_accounts(query: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=1)
    await query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, —Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å):",
        reply_markup=kb.add(
            InlineKeyboardButton("üìò –°–µ—Ç–∞–ø –ö–ò–ù–ì+10 –∞–≤—Ç–æ—Ä–µ–≥–æ–≤", callback_data="acc:setup"),
            InlineKeyboardButton("üìò –ö–ò–ù–ì + 1-3 –ë–ú", callback_data="acc:bm"),
            InlineKeyboardButton("üìò –ê–≤—Ç–æ—Ä–µ–≥–∏", callback_data="acc:regs")
        )
    )
    await Form.account_category.set()
    await query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("acc:"), state=Form.account_category)
async def supply_account_quantity(query: types.CallbackQuery, state: FSMContext):
    _, acc_type = query.data.split(":")
    await state.update_data(account_type=acc_type)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=cancel_kb)
    await Form.account_quantity.set()
    await query.answer()

@dp.message_handler(state=Form.account_quantity)
async def send_account_request(message: types.Message, state: FSMContext):
    quantity = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ—Ç username"
    data = await state.get_data()

    acc_names = {
        "setup": "üìò –°–µ—Ç–∞–ø –ö–ò–ù–ì+10 –∞–≤—Ç–æ—Ä–µ–≥–æ–≤",
        "bm": "üìò –ö–ò–ù–ì + 1-3 –ë–ú",
        "regs": "üìò –ê–≤—Ç–æ—Ä–µ–≥–∏"
    }

    text = (
        f"üì¶ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –æ—Ç @{username} (ID: {user_id})\n"
        f"–¢–∏–ø: {acc_names.get(data['account_type'], '‚ùì')}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"
    )

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"approve:{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"decline:{user_id}")
    )

    await bot.send_message(ADMIN_ID, text, reply_markup=kb)
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=menu_kb)
    await state.finish()

# üåê –î–æ–º–µ–Ω—ã
@dp.callback_query_handler(lambda c: c.data == "supply:domains", state=Form.supplies_choice)
async def supply_domains(query: types.CallbackQuery):
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤:", reply_markup=cancel_kb)
    await Form.domain_quantity.set()
    await query.answer()

@dp.message_handler(state=Form.domain_quantity)
async def send_domain_request(message: types.Message, state: FSMContext):
    quantity = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ—Ç username"

    text = (
        f"üì¶ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–º–µ–Ω—ã –æ—Ç @{username} (ID: {user_id})\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"
    )

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"approve:{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"decline:{user_id}")
    )

    await bot.send_message(ADMIN_ID, text, reply_markup=kb)
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=menu_kb)
    await state.finish()

# ‚úÖ / ‚ùå –æ–±—Ä–∞–±–æ—Ç–∫–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith(("approve", "decline")))
async def process_admin_action(query: types.CallbackQuery):
    action, user_id = query.data.split(":")
    user_id = int(user_id)

    if action == "approve":
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        await query.message.edit_reply_markup()
        await query.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    elif action == "decline":
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await query.message.edit_reply_markup()
        await query.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

# ‚ùå –û—Ç–º–µ–Ω–∞
@dp.message_handler(lambda msg: msg.text == "‚ùå –û—Ç–º–µ–Ω–∞", state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚§¥Ô∏è", reply_markup=menu_kb)

if __name__ == "__main__":
    executor.start_polling(dp)
