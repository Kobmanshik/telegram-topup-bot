from aiogram import Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN_ID

menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.add(KeyboardButton("üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"))
menu_kb.add(KeyboardButton("üì¶ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏"))

cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
cancel_kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

class Supplies(StatesGroup):
    choosing_supply_type = State()
    choosing_account_category = State()
    entering_quantity = State()


def register(dp: Dispatcher):
    @dp.message_handler(lambda msg: msg.text == "üì¶ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏")
    async def request_supplies(message: types.Message):
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(
            InlineKeyboardButton("üßë‚Äçüíª –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="supply:accounts"),
            InlineKeyboardButton("üåê –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã", callback_data="supply:domains")
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤:", reply_markup=kb)
        await Supplies.choosing_supply_type.set()

    @dp.callback_query_handler(lambda c: c.data.startswith("supply:"), state=Supplies.choosing_supply_type)
    async def choose_supply_type(query: types.CallbackQuery, state: FSMContext):
        supply_type = query.data.split(":")[1]
        await state.update_data(supply_type=supply_type)

        if supply_type == "accounts":
            kb = InlineKeyboardMarkup(row_width=1)
            kb.add(
                InlineKeyboardButton("üë§ –°–µ—Ç–∞–ø –ö–ò–ù–ì + 10 –∞–≤—Ç–æ—Ä–µ–≥–æ–≤", callback_data="acc:setup_king"),
                InlineKeyboardButton("üë§ –ö–ò–ù–ì + 1‚Äì3 –ë–ú", callback_data="acc:king_bm"),
                InlineKeyboardButton("üë§ –ê–≤—Ç–æ—Ä–µ–≥–∏", callback_data="acc:autoregs")
            )
            await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, —Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å):", reply_markup=kb)
            await Supplies.choosing_account_category.set()
        else:
            await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤:", reply_markup=cancel_kb)
            await Supplies.entering_quantity.set()

    @dp.callback_query_handler(lambda c: c.data.startswith("acc:"), state=Supplies.choosing_account_category)
    async def choose_account_category(query: types.CallbackQuery, state: FSMContext):
        category = query.data.split(":")[1]
        await state.update_data(account_category=category)
        await query.message.answer("–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=cancel_kb)
        await Supplies.entering_quantity.set()

    @dp.message_handler(state=Supplies.entering_quantity)
    async def receive_quantity(message: types.Message, state: FSMContext):
        data = await state.get_data()
        qty = message.text.strip()
        user_id = message.from_user.id
        username = message.from_user.username or "–Ω–µ—Ç username"
        supply_type = data.get("supply_type")

        text = f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –æ—Ç @{username} (ID: {user_id})\n"
        if supply_type == "accounts":
            cat = data.get("account_category")
            category_map = {
                "setup_king": "üë§ –°–µ—Ç–∞–ø –ö–ò–ù–ì + 10 –∞–≤—Ç–æ—Ä–µ–≥–æ–≤",
                "king_bm": "üë§ –ö–ò–ù–ì + 1‚Äì3 –ë–ú",
                "autoregs": "üë§ –ê–≤—Ç–æ—Ä–µ–≥–∏"
            }
            category = category_map.get(cat, cat)
            text += f"–¢–∏–ø: {category}\n–ö–æ–ª-–≤–æ: {qty}"
        else:
            text += f"üåê –î–û–ú–ï–ù–´\n–ö–æ–ª-–≤–æ: {qty}"

        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"supply_approve:{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"supply_decline:{user_id}")
        )

        await message.bot.send_message(ADMIN_ID, text, reply_markup=kb)
        await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üì§", reply_markup=menu_kb)
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data and c.data.startswith(("supply_approve", "supply_decline")))
    async def process_callback(query: types.CallbackQuery):
        action, user_id = query.data.split(":")
        user_id = int(user_id)

        if action == "supply_approve":
            await query.bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        elif action == "supply_decline":
            await query.bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await query.message.edit_reply_markup()
        await query.answer("–ì–æ—Ç–æ–≤–æ")
